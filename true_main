import numpy as np
import cv2 as cv
import pydicom as dicom
import glob
from skimage.util import img_as_ubyte
import matplotlib.pyplot as plt
import os



def getLongContours(contours):
    longCont = []

    for cnt in contours:
        if (len(cnt) > 1000):
            longCont.append(cnt)

    return longCont

it = 0 # Variable global para el conteo de los bordes eliminados de todas las imagenes
def filterContours(contours, hierarchy):
    global it
    toDelete = []

    for i in range(0,len(hierarchy[0]),1): # Escogemos solo los bordes exteriores (sin contar el más exterior)
        if hierarchy[0,i,3] == -1:
            toDelete.append(i)
            print(it,"Eliminado por jerarquía")
            it = it + 1

    cont = np.delete(contours, toDelete, axis=0)
    toDelete = []

    i = 0

    for cnt in cont:
        if len(cnt) < 50:
            toDelete.append(i)
            print(it, "Eliminado por longitud")
            it = it + 1
        i = i + 1

    cont = np.delete(cont, toDelete, axis=0)

    return cont

def show_img(img, mode=0, erode=2, dilate=2):
    img = cv.normalize(img, None, 0, 255, norm_type=cv.NORM_MINMAX, dtype=cv.CV_8U)
    if mode==0:
        #plt.matshow(img, cmap='gray')
        #plt.show()
        cv.imshow("window",img)
    elif mode==1:
        ret, th2 = cv.threshold(img,80,255,cv.THRESH_BINARY)
        kernel = np.ones((5, 5), np.uint8)
        th2 = cv.erode(th2, kernel, iterations=erode)
        th2 = cv.dilate(th2, kernel, iterations=dilate)
        cv.imshow("window",th2)
    elif mode==2:
        ret, th2 = cv.threshold(img, 30, 255, cv.THRESH_BINARY)
        kernel = np.ones((5, 5), np.uint8)
        th2 = cv.erode(th2, kernel, iterations=erode)
        th2 = cv.dilate(th2, kernel, iterations=dilate)
        contours, hierarchy = cv.findContours(th2, cv.RETR_TREE, cv.CHAIN_APPROX_SIMPLE)
       # print(len(contours))
       # print(hierarchy)

        conts = filterContours(contours, hierarchy)

        cv_img = cv.cvtColor(img,cv.COLOR_GRAY2BGR) # th2 -> ver la umbralizada, img -> ver la original

        cv.drawContours(cv_img, conts, -1, (0, 255, 0), 2)
     #   cv.circle(cv_image, (10,10), 10, (0, 255, 0), 4)
        cv.imshow("window",cv_img)
    cv.waitKey(0)



PATH = []
PATH.append("/home/jaime/Documents/SIB Imagenes seleccionadas/Case 1/")
PATH.append("/home/jaime/Documents/SIB Imagenes seleccionadas/Case 2/")
PATH.append("/home/jaime/Documents/SIB Imagenes seleccionadas/Case 3/")

imageSets = []

for i in range(0,3):
    image_files = glob.glob(PATH[i]+"*.dcm")
    image_files.sort()
    images = [(dicom.dcmread(img)).pixel_array for img in image_files]
    imageSets.append(images)

for i in range(0,len(imageSets[2])-1):
    show_img(imageSets[2][i],2)
    #print(filenames[i].dtype)


#ds=dicom.dcmread(PATH+'000000.dcm')
#dcm_sample=ds.pixel_array*128
#cv.imshow('sample image dicom',dcm_sample)

